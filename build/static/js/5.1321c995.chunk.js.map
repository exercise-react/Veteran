{"version":3,"sources":["containers/ListClients.js","containers/ClientForm.js","containers/VeteranInformation.js"],"names":["desc","a","b","orderBy","headRows","id","numeric","disablePadding","label","idsHeader","reduce","acc","curr","push","EnhancedTableHead","props","order","onRequestSort","react_default","createElement","TableHead_default","TableRow_default","map","row","TableCell_default","key","align","padding","sortDirection","TableSortLabel_default","active","direction","onClick","property","event","ListClients","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selected","page","rowsPerPage","selectRowAction","editRowAction","cancelEditRowAction","addNewClientAction","setOrder","value","setState","objectSpread","setOrderBy","setSelected","ID","setPage","setRowsPerPage","handleChangePage","bind","assertThisInitialized","handleChangeRowsPerPage","handleRequestSort","handleSelectAllClick","handleClick","newPage","target","isDesc","checked","newSelects","rows","n","name","_this2","classes","Array","isArray","clientData","length","emptyRows","Math","min","className","root","Paper_default","paper","tableWrapper","Table_default","table","aria-labelledby","size","onSelectAllClick","rowCount","TableBody_default","array","cmp","stabilizedThis","el","index","sort","stableSort","slice","currentRow","isItemSelected","indexOf","hover","role","aria-checked","tabIndex","idHeader","style","height","colSpan","TablePagination","rowsPerPageOptions","component","count","backIconButtonProps","aria-label","nextIconButtonProps","onChangePage","onChangeRowsPerPage","Button_default","button","React","Component","connect","dispatch","data","type","payload","withStyles","theme","paddingLeft","spacing","paddingRight","width","marginBottom","tableRow","cursor","margin","highlight","palette","color","secondary","main","backgroundColor","lighten","light","text","primary","dark","spacer","flex","actions","title","minWidth","overflowX","ClientForm","open","loadDataAction","editingSelectClientAction","saveSelectClientAction","cancelEditSelectClientAction","handleClickOpen","handleClose","_this$props","clientForm","selectClientData","addNewClient","dataClientForm","handleChange","defineProperty","element","placeholder","required","uniqKey","console","warn","TextField_default","defaultValue","onChange","textField","helperText","variant","multiline","items","select","SelectProps","MenuProps","menu","option","MenuItem","Fragment","Dialog","onClose","aria-describedby","DialogTitle","DialogContent","DialogContentText","FirstName","LastName","CityBirth","StateBirth","Branch","Rank","Discharge","Comments","DialogActions","autoFocus","PureComponent","selectClientID","selectClient","container","display","flexDirection","marginLeft","marginRight","containerButton","marginTop","formControl","VeteranInformation","containers_ListClients","containers_ClientForm","anyUrl","action","loadData"],"mappings":"uVA2DA,SAASA,EAAKC,EAAGC,EAAGC,GAChB,OAAID,EAAEC,GAAWF,EAAEE,IACP,EAERD,EAAEC,GAAWF,EAAEE,GACR,EAEJ,EAkBX,IAAMC,EAAW,CACb,CAACC,GAAI,YAAaC,SAAS,EAAOC,gBAAgB,EAAMC,MAAO,QAC/D,CAACH,GAAI,aAAcC,SAAS,EAAOC,gBAAgB,EAAMC,MAAO,eAChE,CAACH,GAAI,SAAUC,SAAS,EAAOC,gBAAgB,EAAMC,MAAO,WAG1DC,EAAYL,EAASM,OAAO,SAACC,EAAKC,GAEpC,OADAD,EAAIE,KAAKD,EAAKP,IACPM,GACR,IAGH,SAASG,EAAkBC,GAAO,IACvBC,EAAiCD,EAAjCC,MAAOb,EAA0BY,EAA1BZ,QAASc,EAAiBF,EAAjBE,cAKvB,OACIC,EAAAjB,EAAAkB,cAACC,EAAAnB,EAAD,KACIiB,EAAAjB,EAAAkB,cAACE,EAAApB,EAAD,KACKG,EAASkB,IAAI,SAAAC,GAAG,OACbL,EAAAjB,EAAAkB,cAACK,EAAAvB,EAAD,CACIwB,IAAKF,EAAIlB,GACTqB,MAAOH,EAAIjB,QAAU,QAAU,SAC/BqB,QAASJ,EAAIhB,eAAiB,OAAS,UACvCqB,cAAezB,IAAYoB,EAAIlB,IAAKW,GACpCE,EAAAjB,EAAAkB,cAACU,EAAA5B,EAAD,CACI6B,OAAQ3B,IAAYoB,EAAIlB,GACxB0B,UAAWf,EACXgB,SAhBEC,EAgByBV,EAAIlB,GAhBjB,SAAA6B,GAClCjB,EAAciB,EAAOD,MAgBAV,EAAIf,QAjBH,IAAAyB,UA2BxBE,cAEF,SAAAA,EAAYpB,GAAO,IAAAqB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMxB,KACD4B,MAAQ,CACT3B,MAAO,MACPb,QAAS,GACTyC,SAAU,KACVC,KAAM,EACNC,YAAa,GAGjBV,EAAKW,gBAAkBhC,EAAMgC,gBAC7BX,EAAKY,cAAgBjC,EAAMiC,cAC3BZ,EAAKa,oBAAsBlC,EAAMkC,oBACjCb,EAAKc,mBAAqBnC,EAAMmC,mBAEhCd,EAAKe,SAAW,SAACC,GACbhB,EAAKiB,SAAS,SAAAV,GAAK,OAAAN,OAAAiB,EAAA,EAAAjB,CAAA,GAASM,EAAT,CAAgB3B,MAAOoC,OAE9ChB,EAAKmB,WAAa,SAACH,GACfhB,EAAKiB,SAAS,SAAAV,GAAK,OAAAN,OAAAiB,EAAA,EAAAjB,CAAA,GAASM,EAAT,CAAgBxC,QAASiD,OAEhDhB,EAAKoB,YAAc,SAACJ,GACZhB,EAAKO,MAAMC,WAAaQ,EAAMK,IAC9BrB,EAAKiB,SAAS,SAAAV,GAAK,OAAAN,OAAAiB,EAAA,EAAAjB,CAAA,GAASM,EAAT,CAAgBC,SAAU,SAC7CR,EAAKW,gBAAgB,MACrBX,EAAKa,wBAGLb,EAAKiB,SAAS,SAAAV,GAAK,OAAAN,OAAAiB,EAAA,EAAAjB,CAAA,GAASM,EAAT,CAAgBC,SAAUQ,EAAMK,OACnDrB,EAAKW,gBAAgBK,GACrBhB,EAAKY,cAAcI,KAG3BhB,EAAKsB,QAAU,SAACN,GACZhB,EAAKiB,SAAS,SAAAV,GAAK,OAAAN,OAAAiB,EAAA,EAAAjB,CAAA,GAASM,EAAT,CAAgBE,KAAMO,OAE7ChB,EAAKuB,eAAiB,SAACP,GACnBhB,EAAKiB,SAAS,SAAAV,GAAK,OAAAN,OAAAiB,EAAA,EAAAjB,CAAA,GAASM,EAAT,CAAgBG,YAAaM,OAGpDhB,EAAKwB,iBAAmBxB,EAAKwB,iBAAiBC,KAAtBxB,OAAAyB,EAAA,EAAAzB,CAAAD,IACxBA,EAAK2B,wBAA0B3B,EAAK2B,wBAAwBF,KAA7BxB,OAAAyB,EAAA,EAAAzB,CAAAD,IAC/BA,EAAK4B,kBAAoB5B,EAAK4B,kBAAkBH,KAAvBxB,OAAAyB,EAAA,EAAAzB,CAAAD,IACzBA,EAAK6B,qBAAuB7B,EAAK6B,qBAAqBJ,KAA1BxB,OAAAyB,EAAA,EAAAzB,CAAAD,IAC5BA,EAAK8B,YAAc9B,EAAK8B,YAAYL,KAAjBxB,OAAAyB,EAAA,EAAAzB,CAAAD,IA5CJA,gFA+CFF,EAAOiC,GACpB5B,KAAKmB,QAAQS,mDAGOjC,GACpBK,KAAKoB,gBAAgBzB,EAAMkC,OAAOhB,OAClCb,KAAKmB,QAAQ,6CAICxB,EAAOD,GACrB,IAAMoC,EAAS9B,KAAKI,MAAMxC,UAAY8B,GAAiC,SAArBM,KAAKI,MAAM3B,MAC7DuB,KAAKY,SAASkB,EAAS,MAAQ,QAC/B9B,KAAKgB,WAAWtB,gDAGCC,GACjB,GAAIA,EAAMkC,OAAOE,QAAjB,CACI,IAAMC,EAAahC,KAAKiC,KAAKlD,IAAI,SAAAmD,GAAC,OAAIA,EAAEC,OACxCnC,KAAKiB,YAAYe,QAGrBhC,KAAKiB,YAAY,0CAGTjC,GACJA,GACAgB,KAAKiB,YAAYjC,oCAMhB,IAhIOP,EAAOb,EAgIdwE,EAAApC,KACEqC,EAAWrC,KAAKxB,MAAhB6D,QACDJ,EAAOK,MAAMC,QAAQvC,KAAKxB,MAAMgE,aAAexC,KAAKxB,MAAMgE,WAAWC,OAAS,EAC9EzC,KAAKxB,MAAMgE,WACX,GAOAE,EAAY1C,KAAKI,MAAMG,YAAcoC,KAAKC,IAAI5C,KAAKI,MAAMG,YAC3D0B,EAAKQ,OAASzC,KAAKI,MAAME,KAAON,KAAKI,MAAMG,aAE/C,OACI5B,EAAAjB,EAAAkB,cAAA,OAAKiE,UAAWR,EAAQS,MAAxB,IACInE,EAAAjB,EAAAkB,cAAA,WACAD,EAAAjB,EAAAkB,cAAA,WACID,EAAAjB,EAAAkB,cAAA,QAAMiE,UAAU,aAAhB,WADJ,yBAGAlE,EAAAjB,EAAAkB,cAAA,WACAD,EAAAjB,EAAAkB,cAACmE,EAAArF,EAAD,CAAOmF,UAAWR,EAAQW,OACtBrE,EAAAjB,EAAAkB,cAAA,OAAKiE,UAAWR,EAAQY,cACpBtE,EAAAjB,EAAAkB,cAACsE,EAAAxF,EAAD,CACImF,UAAWR,EAAQc,MACnBC,kBAAgB,aAChBC,KAAM,UACN1E,EAAAjB,EAAAkB,cAACL,EAAD,CAEIE,MAAOuB,KAAKI,MAAM3B,MAClBb,QAASoC,KAAKI,MAAMxC,QACpB0F,iBAAkBtD,KAAK0B,qBACvBhD,cAAesB,KAAKyB,kBACpB8B,SAAUtB,EAAKQ,SACnB9D,EAAAjB,EAAAkB,cAAC4E,EAAA9F,EAAD,KA5K5B,SAAoB+F,EAAOC,GACvB,IAAMC,EAAiBF,EAAM1E,IAAI,SAAC6E,EAAIC,GAAL,MAAe,CAACD,EAAIC,KAMrD,OALAF,EAAeG,KAAK,SAACpG,EAAGC,GACpB,IAAMc,EAAQiF,EAAIhG,EAAE,GAAIC,EAAE,IAC1B,OAAc,IAAVc,EAAoBA,EACjBf,EAAE,GAAKC,EAAE,KAEbgG,EAAe5E,IAAI,SAAA6E,GAAE,OAAIA,EAAG,KAsKNG,CAAW9B,GAnKxBxD,EAmKyCuB,KAAKI,MAAM3B,MAnK7Cb,EAmKoDoC,KAAKI,MAAMxC,QAlKrE,SAAVa,EAAmB,SAACf,EAAGC,GAAJ,OAAUF,EAAKC,EAAGC,EAAGC,IAAW,SAACF,EAAGC,GAAJ,OAAWF,EAAKC,EAAGC,EAAGC,MAmK/CoG,MAAMhE,KAAKI,MAAME,KAAON,KAAKI,MAAMG,YAAaP,KAAKI,MAAME,KAAON,KAAKI,MAAMG,YAAcP,KAAKI,MAAMG,aACtGxB,IAAI,SAAAkF,GACD,IA/Bb9B,EA+BmB+B,GA/BnB/B,EA+B+C8B,EAAW/C,KA9BtDkB,EAAKhC,MAAMC,WAAmD,IAAvC+B,EAAKhC,MAAMC,SAAS8D,QAAQhC,GAgC1C,OACIxD,EAAAjB,EAAAkB,cAACE,EAAApB,EAAD,CACI0G,OAAK,EACL3E,QAAS,kBAAM2C,EAAKT,YAAYsC,IAChCI,KAAK,WACLC,eAAcJ,EACdK,UAAW,EACXrF,IAAK+E,EAAW/C,GAChBb,SAAU6D,GACThG,EAAUa,IAAI,SAACyF,EAAUX,GACtB,OACIlF,EAAAjB,EAAAkB,cAACK,EAAAvB,EAAD,CAAWwB,IAAK2E,EAAO1E,MAAM,QACxB8E,EAAWO,SAMvC9B,EAAY,GACT/D,EAAAjB,EAAAkB,cAACE,EAAApB,EAAD,CAAU+G,MAAO,CAACC,OAAQ,GAAKhC,IAC3B/D,EAAAjB,EAAAkB,cAACK,EAAAvB,EAAD,CAAWiH,QAAS,OAMpChG,EAAAjB,EAAAkB,cAACgG,EAAA,EAAD,CACIC,mBAAoB,CAAC,GACrBC,UAAU,MACVC,MAAO9C,EAAKQ,OACZlC,YAAaP,KAAKI,MAAMG,YACxBD,KAAMN,KAAKI,MAAME,KACjB0E,oBAAqB,CACjBC,aAAc,iBAElBC,oBAAqB,CACjBD,aAAc,aAElBE,aAAcnF,KAAKqB,iBACnB+D,oBAAqBpF,KAAKwB,0BAE9B7C,EAAAjB,EAAAkB,cAACyG,EAAA3H,EAAD,CAAQmF,UAAWR,EAAQiD,OACnB7F,QAAS,kBAAM2C,EAAKzB,uBAD5B,kBAnKE4E,IAAMC,WA2LjBC,cAJS,SAAArF,GAAK,MAAK,CAC9BoC,WAAYpC,EAAMoC,aAVK,SAAAkD,GAAQ,MAAK,CACpClF,gBAAiB,SAAAmF,GAAI,OAAID,EAAS,CAACE,KAAM,gBAAiBC,QAASF,KACnElF,cAAe,SAAAkF,GAAI,OAAID,EAAS,CAACE,KAAM,uBAAwBC,QAASF,KACxEjF,oBAAqB,kBAAMgF,EAAS,CAACE,KAAM,wBAC3CjF,mBAAoB,kBAAM+E,EAAS,CAACE,KAAM,sBAS/BH,CAGbK,qBA7Sa,SAAAC,GAAK,MAAK,CACrBjD,KAAM,CACFkD,YAAaD,EAAME,QAAQ,GAC3BC,aAAcH,EAAME,QAAQ,IAGhCjD,MAAO,CACHmD,MAAO,OACPC,aAAcL,EAAME,QAAQ,IAGhCI,SAAU,CACNC,OAAQ,WAEZhB,OAAQ,CACJiB,OAAQR,EAAME,QAAQ,IAE1BO,UAC2B,UAAvBT,EAAMU,QAAQb,KACR,CACEc,MAAOX,EAAMU,QAAQE,UAAUC,KAC/BC,gBAAiBC,kBAAQf,EAAMU,QAAQE,UAAUI,MAAO,MAE1D,CACEL,MAAOX,EAAMU,QAAQO,KAAKC,QAC1BJ,gBAAiBd,EAAMU,QAAQE,UAAUO,MAErDC,OAAQ,CACJC,KAAM,YAEVC,QAAS,CACLX,MAAOX,EAAMU,QAAQO,KAAKL,WAE9BW,MAAO,CACHF,KAAM,YAEVjE,MAAO,CACHoE,SAAU,KAEdtE,aAAc,CACVuE,UAAW,UAqQjB1B,CAAmBlG,oFCxRf6H,cAEF,SAAAA,EAAYjJ,GAAO,IAAAqB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyH,IACf5H,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2H,GAAAtH,KAAAH,KAAMxB,KAED4B,MAAQ,CAACsH,MAAM,GAEpB7H,EAAK8H,eAAiBnJ,EAAMmJ,eAC5B9H,EAAK+H,0BAA4BpJ,EAAMoJ,0BACvC/H,EAAKgI,uBAAyBrJ,EAAMqJ,uBACpChI,EAAKiI,6BAA+BtJ,EAAMsJ,6BAE1CjI,EAAKkI,gBAAkBlI,EAAKkI,gBAAgBzG,KAArBxB,OAAAyB,EAAA,EAAAzB,CAAAD,IACvBA,EAAKmI,YAAcnI,EAAKmI,YAAY1G,KAAjBxB,OAAAyB,EAAA,EAAAzB,CAAAD,IAXJA,8HAkBfG,KAAKc,SAAS,CAAC4G,MAAM,0CAIrB1H,KAAKc,SAAS,CAAC4G,MAAM,GAAQ,cAE7B1H,KAAK6H,0DAGA,IAAAzF,EAAApC,KAAAiI,EAMDjI,KAAKxB,MAJL0J,EAFCD,EAEDC,WACAC,EAHCF,EAGDE,iBACAC,EAJCH,EAIDG,aACA/F,EALC4F,EAKD5F,QAGEgG,EAAiB/F,MAAMC,QAAQ2F,IAClCA,EAAWzF,OAAS,EACjByF,EACA,GAEAI,EAAe,SAAAnG,GAAI,OAAI,SAAAxC,GAEzByC,EAAKwF,0BAAL9H,OAAAiB,EAAA,EAAAjB,CAAA,GAAmCqI,EAAnCrI,OAAAyI,EAAA,EAAAzI,CAAA,GAAsDqC,EAAOxC,EAAMkC,OAAOhB,WAI9E,OACIlC,EAAAjB,EAAAkB,cAAA,OAAKiE,UAAU,wBACXlE,EAAAjB,EAAAkB,cAAA,OAAKiE,UAAU,aAAf,gBACCwF,EAAetJ,IAAI,SAACyJ,EAAS3E,GAC1B,GAAI,YAAa2E,GAAWA,EAAQA,QAAS,KAClCvK,EAAsCuK,EAAtCvK,MAAOwK,EAA+BD,EAA/BC,YAAatG,EAAkBqG,EAAlBrG,KAAMuG,EAAYF,EAAZE,SAC3BC,EAAUP,EACVvE,EACAsE,EAAiBhG,GAEvB,GADAyG,QAAQC,KAAK,UAAWF,GACA,UAApBH,EAAQA,QAAqB,CAC7B,GAAqB,SAAjBA,EAAQ5C,KACR,OACIjH,EAAAjB,EAAAkB,cAACkK,EAAApL,EAAD,CAAWwB,IAAKyJ,EACL7K,GAAG,sBACHG,MAAOA,EACP8K,aAAcZ,EAAiBhG,GAC/B6G,SAAUV,EAAanG,GACvBU,UAAWR,EAAQ4G,UACnBC,WAAYT,EACZlC,OAAO,SACP4C,QAAQ,WACRT,SAAUA,IAG7B,GAAqB,aAAjBF,EAAQ5C,KACR,OACIjH,EAAAjB,EAAAkB,cAACkK,EAAApL,EAAD,CAAWwB,IAAKyJ,EACLS,WAAS,EACTtL,GAAG,sBACHG,MAAOA,EACP8K,aAAcZ,EAAiBhG,GAC/B6G,SAAUV,EAAanG,GACvBU,UAAWR,EAAQ4G,UACnBC,WAAYT,EACZlC,OAAO,SACP4C,QAAQ,WACRT,SAAUA,IAIjC,GAAwB,WAApBF,EAAQA,QAAsB,KACvBa,EAASb,EAATa,MAEP,OACI1K,EAAAjB,EAAAkB,cAACkK,EAAApL,EAAD,CAAWwB,IAAKyJ,EACL7K,GAAG,kCACHwL,QAAM,EACNrL,MAAOA,EACP4E,UAAWR,EAAQ4G,UACnBpI,MAAOsH,EAAiBhG,GACxB6G,SAAUV,EAAanG,GACvBoH,YAAa,CACTC,UAAW,CACP3G,UAAWR,EAAQoH,OAG3BP,WAAYT,EACZlC,OAAO,SACP4C,QAAQ,WACRT,SAAUA,GAGbW,EAAMtK,IAAI,SAAA2K,GAAM,OACZ/K,EAAAjB,EAAAkB,cAAC+K,EAAA,EAAD,CAAUzK,IAAKwK,EAAO7I,MAAOA,MAAO6I,EAAO7I,OACtC6I,EAAOzL,WAQpC,OAAQU,EAAAjB,EAAAkB,cAAAD,EAAAjB,EAAAkM,SAAA,QAEZjL,EAAAjB,EAAAkB,cAAA,OAAKiE,UAAU,oBACXlE,EAAAjB,EAAAkB,cAACyG,EAAA3H,EAAD,CAAQ+B,QAASO,KAAK+H,gBACdoB,QAAQ,YACRzC,MAAM,UACN7D,UAAWR,EAAQiD,QAH3B,QAOA3G,EAAAjB,EAAAkB,cAACyG,EAAA3H,EAAD,CAAQ+B,QAAS,kBAAM2C,EAAK0F,gCACpBqB,QAAQ,YACRtG,UAAU,iBAFlB,UAKAlE,EAAAjB,EAAAkB,cAACiL,EAAA,EAAD,CACInC,KAAM1H,KAAKI,MAAMsH,KACjBoC,QAAS9J,KAAKgI,YACd5E,kBAAgB,qBAChB2G,mBAAiB,4BAEjBpL,EAAAjB,EAAAkB,cAACoL,EAAA,EAAD,CAAalM,GAAG,sBAAsB,iBACtCa,EAAAjB,EAAAkB,cAACqL,EAAA,EAAD,KACItL,EAAAjB,EAAAkB,cAACsL,EAAA,EAAD,CAAmBpM,GAAG,4BAAtB,cACgBqK,EAAiBgC,UADjC,IAC4CxL,EAAAjB,EAAAkB,cAAA,WAD5C,aAEeuJ,EAAiBiC,SAASzL,EAAAjB,EAAAkB,cAAA,WAFzC,cAGgBuJ,EAAiBkC,UAAU1L,EAAAjB,EAAAkB,cAAA,WAH3C,eAIiBuJ,EAAiBmC,WAAW3L,EAAAjB,EAAAkB,cAAA,WAJ7C,WAKauJ,EAAiBoC,OAAO5L,EAAAjB,EAAAkB,cAAA,WALrC,SAMWuJ,EAAiBqC,KAAK7L,EAAAjB,EAAAkB,cAAA,WANjC,cAOgBuJ,EAAiBsC,UAAU9L,EAAAjB,EAAAkB,cAAA,WAP3C,aAQeuJ,EAAiBuC,SAAS/L,EAAAjB,EAAAkB,cAAA,aAG7CD,EAAAjB,EAAAkB,cAAC+L,EAAA,EAAD,KACIhM,EAAAjB,EAAAkB,cAACyG,EAAA3H,EAAD,CAAQ+B,QAASO,KAAKgI,YAAatB,MAAM,UAAUkE,WAAS,GAA5D,6BA5JHrF,IAAMsF,eAqLhBpF,cAPS,SAAArF,GAAK,MAAK,CAC9B8H,WAAY9H,EAAM8H,WAClB4C,eAAgB1K,EAAM2K,aAAaD,eACnC3C,iBAAkB/H,EAAM2K,aAAa5C,iBACrCC,aAAchI,EAAMgI,eAVG,SAAA1C,GAAQ,MAAK,CACpCkC,0BAA2B,SAAAjC,GAAI,OAAID,EAAS,CAACE,KAAM,0BAA2BC,QAASF,KACvFkC,uBAAwB,SAAAlC,GAAI,OAAID,EAAS,CAACE,KAAM,uBAAwBC,QAASF,KACjFmC,6BAA8B,kBAAMpC,EAAS,CAACE,KAAM,0BAUzCH,CAGbK,qBA9Ma,SAAAC,GAAK,MAAK,CACrBiF,UAAW,CACPC,QAAS,OACTC,cAAe,UAGnBjC,UAAW,CACPkC,WAAYpF,EAAME,QAAQ,GAC1BmF,YAAarF,EAAME,QAAQ,IAE/BX,OAAQ,CACJ8F,YAAarF,EAAME,QAAQ,IAE/BoF,gBAAiB,CACbC,UAAWvF,EAAME,QAAQ,IAE7BsF,YAAa,CACThF,OAAQR,EAAME,QAAQ,MA6L5BH,CAAmB2B,YCjNf+D,cAEF,SAAAA,EAAYhN,GAAO,IAAAqB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwL,IACf3L,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0L,GAAArL,KAAAH,KAAMxB,KACD4B,MAAQ,CACT3B,MAAO,MACPb,QAAS,WACTyC,SAAU,KACVC,KAAM,EACNC,YAAa,GAEjBV,EAAK8H,eAAiBnJ,EAAMmJ,eATb9H,mFAafG,KAAK2H,eAlBS,mCAkBqB,6BACnC3H,KAAK2H,eAlBS,mCAkBqB,mEAMnC,OADmB3H,KAAKxB,MAAMsM,eAE1BnM,EAAAjB,EAAAkB,cAAA,OAAKiE,UAAU,yBACXlE,EAAAjB,EAAAkB,cAAC6M,EAAD,MACA9M,EAAAjB,EAAAkB,cAAC8M,EAAD,OAKJ/M,EAAAjB,EAAAkB,cAAA,OAAKiE,UAAU,yBACXlE,EAAAjB,EAAAkB,cAAC6M,EAAD,cA/BiBlG,IAAMC,WA+CxBC,sBALS,SAAArF,GAAK,MAAK,CAC9B0K,eAAgB1K,EAAM2K,aAAaD,eACnC3C,iBAAkB/H,EAAM2K,aAAa5C,mBAPd,SAAAzC,GAAQ,MAAK,CACpCiC,eAAgB,SAACgE,EAAQC,GAAT,OAAoBlG,EAASmG,YAASF,EAAQC,OASnDnG,CAGb+F","file":"static/js/5.1321c995.chunk.js","sourcesContent":["import React from 'react';\r\nimport {lighten, withStyles} from '@material-ui/core/styles/index';\r\nimport Table from '@material-ui/core/Table/index';\r\nimport TableBody from '@material-ui/core/TableBody/index';\r\nimport TableCell from '@material-ui/core/TableCell/index';\r\nimport TableHead from '@material-ui/core/TableHead/index';\r\nimport TableRow from '@material-ui/core/TableRow/index';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel/index';\r\nimport Paper from '@material-ui/core/Paper/index';\r\nimport Button from \"@material-ui/core/Button/index\";\r\nimport {connect} from \"react-redux\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(1),\r\n\r\n    },\r\n    paper: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(2),\r\n\r\n    },\r\n    tableRow: {\r\n        cursor: 'pointer',\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    highlight:\r\n        theme.palette.type === 'light'\r\n            ? {\r\n                color: theme.palette.secondary.main,\r\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n            }\r\n            : {\r\n                color: theme.palette.text.primary,\r\n                backgroundColor: theme.palette.secondary.dark,\r\n            },\r\n    spacer: {\r\n        flex: '1 1 100%',\r\n    },\r\n    actions: {\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    title: {\r\n        flex: '0 0 auto',\r\n    },\r\n    table: {\r\n        minWidth: 750,\r\n    },\r\n    tableWrapper: {\r\n        overflowX: 'auto',\r\n    },\r\n});\r\n\r\n\r\nfunction desc(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction stableSort(array, cmp) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = cmp(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map(el => el[0]);\r\n}\r\n\r\nfunction getSorting(order, orderBy) {\r\n    return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\r\n}\r\n\r\n\r\nconst headRows = [\r\n    {id: 'FirstName', numeric: false, disablePadding: true, label: 'Name'},\r\n    {id: 'StateBirth', numeric: false, disablePadding: true, label: 'State Birth'},\r\n    {id: 'Branch', numeric: false, disablePadding: true, label: 'Branch'},\r\n];\r\n\r\nconst idsHeader = headRows.reduce((acc, curr) => {\r\n    acc.push(curr.id);\r\n    return acc\r\n}, []);\r\n\r\n\r\nfunction EnhancedTableHead(props) {\r\n    const {order, orderBy, onRequestSort} = props;\r\n    const createSortHandler = property => event => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                {headRows.map(row => (\r\n                    <TableCell\r\n                        key={row.id}\r\n                        align={row.numeric ? 'right' : 'center'}\r\n                        padding={row.disablePadding ? 'none' : 'default'}\r\n                        sortDirection={orderBy === row.id ? order : false}>\r\n                        <TableSortLabel\r\n                            active={orderBy === row.id}\r\n                            direction={order}\r\n                            onClick={createSortHandler(row.id)}>\r\n                            {row.label}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\n\r\nclass ListClients extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            order: 'asc',\r\n            orderBy: '',\r\n            selected: null,\r\n            page: 0,\r\n            rowsPerPage: 4,\r\n        };\r\n\r\n        this.selectRowAction = props.selectRowAction;\r\n        this.editRowAction = props.editRowAction;\r\n        this.cancelEditRowAction = props.cancelEditRowAction;\r\n        this.addNewClientAction = props.addNewClientAction;\r\n\r\n        this.setOrder = (value) => {\r\n            this.setState(state => ({...state, order: value}))\r\n        };\r\n        this.setOrderBy = (value) => {\r\n            this.setState(state => ({...state, orderBy: value}))\r\n        };\r\n        this.setSelected = (value) => {\r\n            if (this.state.selected === value.ID) {\r\n                this.setState(state => ({...state, selected: null}));\r\n                this.selectRowAction(null);\r\n                this.cancelEditRowAction()\r\n\r\n            } else {\r\n                this.setState(state => ({...state, selected: value.ID}));\r\n                this.selectRowAction(value);\r\n                this.editRowAction(value)\r\n            }\r\n        };\r\n        this.setPage = (value) => {\r\n            this.setState(state => ({...state, page: value}))\r\n        };\r\n        this.setRowsPerPage = (value) => {\r\n            this.setState(state => ({...state, rowsPerPage: value}))\r\n        };\r\n\r\n        this.handleChangePage = this.handleChangePage.bind(this);\r\n        this.handleChangeRowsPerPage = this.handleChangeRowsPerPage.bind(this);\r\n        this.handleRequestSort = this.handleRequestSort.bind(this);\r\n        this.handleSelectAllClick = this.handleSelectAllClick.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleChangePage(event, newPage) {\r\n        this.setPage(newPage);\r\n    }\r\n\r\n    handleChangeRowsPerPage(event) {\r\n        this.setRowsPerPage(+event.target.value);\r\n        this.setPage(0);\r\n    }\r\n\r\n\r\n    handleRequestSort(event, property) {\r\n        const isDesc = this.state.orderBy === property && this.state.order === 'desc';\r\n        this.setOrder(isDesc ? 'asc' : 'desc');\r\n        this.setOrderBy(property);\r\n    }\r\n\r\n    handleSelectAllClick(event) {\r\n        if (event.target.checked) {\r\n            const newSelects = this.rows.map(n => n.name);\r\n            this.setSelected(newSelects);\r\n            return;\r\n        }\r\n        this.setSelected(null);\r\n    }\r\n\r\n    handleClick(row) {\r\n        if (row) {\r\n            this.setSelected(row);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        const rows = Array.isArray(this.props.clientData) && this.props.clientData.length > 0\r\n            ? this.props.clientData\r\n            : [];\r\n\r\n\r\n        const isSelected = name => {\r\n                return name && this.state.selected && this.state.selected.indexOf(name) !== -1\r\n            }\r\n        ;\r\n        const emptyRows = this.state.rowsPerPage - Math.min(this.state.rowsPerPage,\r\n            rows.length - this.state.page * this.state.rowsPerPage);\r\n\r\n        return (\r\n            <div className={classes.root}>`\r\n                <br/>\r\n                <div>\r\n                    <span className='text-bold'>Clients</span> (Choose row to edit)\r\n                </div>\r\n                <br/>\r\n                <Paper className={classes.paper}>\r\n                    <div className={classes.tableWrapper}>\r\n                        <Table\r\n                            className={classes.table}\r\n                            aria-labelledby=\"tableTitle\"\r\n                            size={'medium'}>\r\n                            <EnhancedTableHead\r\n                                // numSelected={this.state.selected.length}\r\n                                order={this.state.order}\r\n                                orderBy={this.state.orderBy}\r\n                                onSelectAllClick={this.handleSelectAllClick}\r\n                                onRequestSort={this.handleRequestSort}\r\n                                rowCount={rows.length}/>\r\n                            <TableBody>\r\n                                {stableSort(rows, getSorting(this.state.order, this.state.orderBy))\r\n                                    .slice(this.state.page * this.state.rowsPerPage, this.state.page * this.state.rowsPerPage + this.state.rowsPerPage)\r\n                                    .map(currentRow => {\r\n                                        const isItemSelected = isSelected(currentRow.ID);\r\n\r\n                                        return (\r\n                                            <TableRow\r\n                                                hover\r\n                                                onClick={() => this.handleClick(currentRow)}\r\n                                                role=\"checkbox\"\r\n                                                aria-checked={isItemSelected}\r\n                                                tabIndex={-1}\r\n                                                key={currentRow.ID}\r\n                                                selected={isItemSelected}>\r\n                                                {idsHeader.map((idHeader, index) => {\r\n                                                    return (\r\n                                                        <TableCell key={index} align=\"left\">\r\n                                                            {currentRow[idHeader]}</TableCell>\r\n                                                    )\r\n                                                })}\r\n                                            </TableRow>\r\n                                        );\r\n                                    })}\r\n                                {emptyRows > 0 && (\r\n                                    <TableRow style={{height: 49 * emptyRows}}>\r\n                                        <TableCell colSpan={6}/>\r\n                                    </TableRow>\r\n                                )}\r\n                            </TableBody>\r\n                        </Table>\r\n\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[5]}\r\n                            component=\"div\"\r\n                            count={rows.length}\r\n                            rowsPerPage={this.state.rowsPerPage}\r\n                            page={this.state.page}\r\n                            backIconButtonProps={{\r\n                                'aria-label': 'Previous Page',\r\n                            }}\r\n                            nextIconButtonProps={{\r\n                                'aria-label': 'Next Page',\r\n                            }}\r\n                            onChangePage={this.handleChangePage}\r\n                            onChangeRowsPerPage={this.handleChangeRowsPerPage}/>\r\n\r\n                        <Button className={classes.button}\r\n                                onClick={() => this.addNewClientAction()}>\r\n                            +New</Button>\r\n                    </div>\r\n\r\n                </Paper>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    selectRowAction: data => dispatch({type: 'SELECT_CLIENT', payload: data}),\r\n    editRowAction: data => dispatch({type: 'EDIT_SELECTED_CLIENT', payload: data}),\r\n    cancelEditRowAction: () => dispatch({type: 'CANCEL_EDIT_CLIENT'}),\r\n    addNewClientAction: () => dispatch({type: 'ADD_NEW_CLIENT'}),\r\n\r\n\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n    clientData: state.clientData,\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(withStyles(styles)(ListClients));\r\n","import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles/index';\r\nimport TextField from \"@material-ui/core/TextField/index\";\r\nimport Button from \"@material-ui/core/Button/index\";\r\nimport {connect} from \"react-redux\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\n\r\n\r\nconst styles = theme => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    button: {\r\n        marginRight: theme.spacing(7),\r\n    },\r\n    containerButton: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n    },\r\n});\r\n\r\n\r\nclass ClientForm extends React.PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {open: false};\r\n\r\n        this.loadDataAction = props.loadDataAction;\r\n        this.editingSelectClientAction = props.editingSelectClientAction;\r\n        this.saveSelectClientAction = props.saveSelectClientAction;\r\n        this.cancelEditSelectClientAction = props.cancelEditSelectClientAction;\r\n\r\n        this.handleClickOpen = this.handleClickOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    handleClickOpen() {\r\n        this.setState({open: true});\r\n    };\r\n\r\n    handleClose() {\r\n        this.setState({open: false}, function () {\r\n        });\r\n        this.saveSelectClientAction();\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            clientForm,\r\n            selectClientData,\r\n            addNewClient,\r\n            classes,\r\n        } = this.props;\r\n\r\n        const dataClientForm = Array.isArray(clientForm)\r\n        && clientForm.length > 0\r\n            ? clientForm\r\n            : [];\r\n\r\n        const handleChange = name => event => {\r\n\r\n            this.editingSelectClientAction({...selectClientData, [name]: event.target.value})\r\n        };\r\n\r\n\r\n        return (\r\n            <div className='clientForm-container'>\r\n                <div className='text-bold'> Client Form</div>\r\n                {dataClientForm.map((element, index) => {\r\n                    if ('element' in element && element.element) {\r\n                        const {label, placeholder, name, required} = element;\r\n                        const uniqKey = addNewClient\r\n                            ? index\r\n                            : selectClientData[name];\r\n                        console.warn('uniqKey', uniqKey);\r\n                        if (element.element === 'input') {\r\n                            if (element.type === 'text') {\r\n                                return (\r\n                                    <TextField key={uniqKey}\r\n                                               id=\"outlined-helperText\"\r\n                                               label={label}\r\n                                               defaultValue={selectClientData[name]}\r\n                                               onChange={handleChange(name)}\r\n                                               className={classes.textField}\r\n                                               helperText={placeholder}\r\n                                               margin=\"normal\"\r\n                                               variant=\"outlined\"\r\n                                               required={required}\r\n                                    />)\r\n                            }\r\n                            if (element.type === 'textarea') {\r\n                                return (\r\n                                    <TextField key={uniqKey}\r\n                                               multiline\r\n                                               id=\"outlined-helperText\"\r\n                                               label={label}\r\n                                               defaultValue={selectClientData[name]}\r\n                                               onChange={handleChange(name)}\r\n                                               className={classes.textField}\r\n                                               helperText={placeholder}\r\n                                               margin=\"normal\"\r\n                                               variant=\"outlined\"\r\n                                               required={required}/>)\r\n                            }\r\n\r\n                        }\r\n                        if (element.element === 'select') {\r\n                            const {items} = element;\r\n\r\n                            return (\r\n                                <TextField key={uniqKey}\r\n                                           id=\"outlined-select-currency-native\"\r\n                                           select\r\n                                           label={label}\r\n                                           className={classes.textField}\r\n                                           value={selectClientData[name]}\r\n                                           onChange={handleChange(name)}\r\n                                           SelectProps={{\r\n                                               MenuProps: {\r\n                                                   className: classes.menu,\r\n                                               },\r\n                                           }}\r\n                                           helperText={placeholder}\r\n                                           margin=\"normal\"\r\n                                           variant=\"outlined\"\r\n                                           required={required}>\r\n\r\n                                    {\r\n                                        items.map(option => (\r\n                                            <MenuItem key={option.value} value={option.value}>\r\n                                                {option.label}\r\n                                            </MenuItem>\r\n                                        ))\r\n                                    }\r\n                                </TextField>\r\n                            )\r\n                        }\r\n                    }\r\n                    return (<></>)\r\n                })}\r\n                <div className='button-container'>\r\n                    <Button onClick={this.handleClickOpen}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.button}>\r\n                        Save\r\n                    </Button>\r\n\r\n                    <Button onClick={() => this.cancelEditSelectClientAction()}\r\n                            variant=\"contained\"\r\n                            className='button-cancel'>\r\n                        Cancel\r\n                    </Button>\r\n                    <Dialog\r\n                        open={this.state.open}\r\n                        onClose={this.handleClose}\r\n                        aria-labelledby=\"alert-dialog-title\"\r\n                        aria-describedby=\"alert-dialog-description\"\r\n                    >\r\n                        <DialogTitle id=\"alert-dialog-title\">{\"Clients data:\"}</DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText id=\"alert-dialog-description\">\r\n                                FirstName: {selectClientData.FirstName} <br/>\r\n                                LastName: {selectClientData.LastName}<br/>\r\n                                CityBirth: {selectClientData.CityBirth}<br/>\r\n                                StateBirth: {selectClientData.StateBirth}<br/>\r\n                                Branch: {selectClientData.Branch}<br/>\r\n                                Rank: {selectClientData.Rank}<br/>\r\n                                Discharge: {selectClientData.Discharge}<br/>\r\n                                Comments: {selectClientData.Comments}<br/>\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={this.handleClose} color=\"primary\" autoFocus>\r\n                                Agree and save\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    editingSelectClientAction: data => dispatch({type: 'EDITING_SELECTED_CLIENT', payload: data}),\r\n    saveSelectClientAction: data => dispatch({type: 'SAVE_COMPLETE_CLIENT', payload: data}),\r\n    cancelEditSelectClientAction: () => dispatch({type: 'CANCEL_EDIT_CLIENT'}),\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n    clientForm: state.clientForm,\r\n    selectClientID: state.selectClient.selectClientID,\r\n    selectClientData: state.selectClient.selectClientData,\r\n    addNewClient: state.addNewClient,\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(withStyles(styles)(ClientForm));\r\n","import React from 'react';\r\nimport ListClients from './ListClients';\r\nimport ClientForm from './ClientForm';\r\nimport {connect} from \"react-redux\";\r\nimport loadData from \"../services/loadData\";\r\n\r\n\r\nconst urlClientData = 'http://localhost:3000/clientData';\r\nconst urlClientForm = 'http://localhost:3000/clientform';\r\n\r\nclass VeteranInformation extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            order: 'asc',\r\n            orderBy: 'calories',\r\n            selected: null,\r\n            page: 0,\r\n            rowsPerPage: 5,\r\n        };\r\n        this.loadDataAction = props.loadDataAction;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadDataAction(urlClientData, 'LOAD_CLIENT_DATA_COMPLETE');\r\n        this.loadDataAction(urlClientForm, 'LOAD_DATA_CLIENT_FORM_COMPLETE');\r\n    }\r\n\r\n    render() {\r\n     \r\n        const dataClient = this.props.selectClientID;\r\n        if (dataClient) return (\r\n            <div className='veteranInfo-container'>\r\n                <ListClients/>\r\n                <ClientForm />\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div className='veteranInfo-container'>\r\n                <ListClients/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    loadDataAction: (anyUrl, action) => dispatch(loadData(anyUrl, action)),\r\n\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n    selectClientID: state.selectClient.selectClientID,\r\n    selectClientData: state.selectClient.selectClientData,\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(VeteranInformation);\r\n"],"sourceRoot":""}